{"version":3,"sources":["appContainer/index.js","components/layout/LeafletMap.js","components/layout/BCrumbs.js","components/layout/RightDrawer.js","components/layout/SearchAppBar.js","components/layout/index.js","components/Loading.js","graphql/queries/GET_CONTINENTS.js","pages/Home.js","components/CountryList.js","graphql/queries/GET_COUNTRIES.js","graphql/queries/GET_CONTINENT.js","pages/Continent.js","pages/country/CountryInfo.js","graphql/queries/GET_COUNTRY.js","pages/country/index.js","App.js","serviceWorker.js","index.js"],"names":["AppContainer","createContainer","_useState","useState","_useState2","Object","slicedToArray","mapPosition","setMapPosition","changeMapPosition","_ref","bbox","north","east","south","west","LeafletMap","useContext","Context","react_default","a","createElement","Map_default","bounds","style","height","animate","TileLayer_default","attribution","url","BCrumbs","withRouter","_ref2","location","classes","loc","pathname","split","className","bcrumb","Breadcrumbs_default","separator","NavigateNext_default","fontSize","arial-label","map","item","index","key","text","length","replace","path","filter","i","join","react_router_dom","to","textDecoration","Typography_default","color","renderLink","withStyles","theme","padding","concat","spacing","unit","RightDrawer","children","Drawer_default","drawer","variant","anchor","paper","drawerPaper","toolbar","layout_BCrumbs","appBar","zIndex","grow","flexGrow","menuButton","marginLeft","marginRight","title","defineProperty","display","breakpoints","up","search","position","borderRadius","shape","backgroundColor","fade","palette","common","white","&:hover","width","searchIcon","pointerEvents","alignItems","justifyContent","inputRoot","inputInput","paddingTop","paddingRight","paddingBottom","paddingLeft","transition","transitions","create","&:focus","props","AppBar_default","Toolbar_default","IconButton_default","aria-label","Menu_default","noWrap","Search_default","InputBase_default","placeholder","root","input","flexShrink","down","content","mixins","layout_SearchAppBar","layout_LeafletMap","layout_RightDrawer","Loading","LinearProgress_default","gql","_templateObject","graphql","GET_CONTINENTS","name","_ref$conts","conts","loading","continents","components_Loading","List_default","component","cont","state","continent","ListItem_default","button","ListItemText_default","primary","CountryList","countries","country","countryName","continentName","index_es","code","countryCode","svg","GET_COUNTRIES_templateObject","GET_CONTINENT_templateObject","compose","fontWeight","textAlign","GET_COUNTRIES","options","variables","GET_CONTINENT","_ref$counts","counts","_ref$cont","loadingCont","useEffect","Fragment","components_CountryList","listContainer","margin","nested","greenAvatar","green","pinkAvatar","pink","blueAvatar","blue","purpleAvatar","purple","showLangs","toggleShowLangs","capital","currency","population","languages","Paper_default","Avatar_default","Place_default","secondary","symbol","People_default","toString","onClick","Language_default","ExpandLess_default","ExpandMore_default","Collapse_default","in","timeout","unmountOnExit","l","disablePadding","inset","GET_COUNTRY_templateObject","flagContainer","GET_COUNTRY","_ref$cntry","cntry","styleProps","border","country_CountryInfo","createMuiTheme","light","main","dark","contrastText","red","typography","useNextVariants","hashHistory","createHashHistory","basename","process","client","ApolloClient","uri","App","react_apollo_esm","core_styles","appContainer","Provider","react_router","history","layout","exact","Home","Continent","Country","Component","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e5974731.chunk.js","sourcesContent":["import { useState } from 'react';\nimport createContainer from 'constate';\n\nconst AppContainer = createContainer(() => {\n  // defaults\n  const position = [[2.6138389710984824, 103.38134765625001], [21.555284406923192, 145.56884765625003]];\n\n  // map rect location\n  const [mapPosition, setMapPosition] = useState(position);\n\n  const changeMapPosition = ({ bbox }) => {\n    setMapPosition([[bbox.north, bbox.east],[bbox.south, bbox.west]]);\n  }\n\n  return {\n    mapPosition,\n    changeMapPosition,\n  };  \n});\n\nexport default AppContainer;\n\n","import React from 'react';\nimport { useContext } from 'react';\nimport Map from 'react-leaflet/lib/Map';\nimport TileLayer from 'react-leaflet/lib/TileLayer';\n\nimport AppContainer from '../../appContainer';\n\nconst LeafletMap = () => {\n  const { mapPosition } = useContext(AppContainer.Context);\n\n  return (\n    <Map\n      bounds={mapPosition}\n      style={{ height: 'calc(100vh - 64px)' }}\n      animate={true}\n    >\n      <TileLayer\n          attribution='Tiles &copy; Esri &mdash; National Geographic, Esri, DeLorme, NAVTEQ, UNEP-WCMC, USGS, NASA, ESA, METI, NRCAN, GEBCO, NOAA, iPC'\n          url=\"https://server.arcgisonline.com/ArcGIS/rest/services/NatGeo_World_Map/MapServer/tile/{z}/{y}/{x}\"\n        />\n    </Map>\n  )\n}\n\nexport default LeafletMap;\n","import React from 'react';\nimport Breadcrumbs from '@material-ui/lab/Breadcrumbs';\nimport { withStyles } from '@material-ui/core/styles';\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\nimport Typography from '@material-ui/core/Typography';\nimport { withRouter, Link } from 'react-router-dom';\n\nconst styles = theme => ({\n  bcrumb: {\n    padding: `${theme.spacing.unit}px ${theme.spacing.unit * 2}px`\n  },\n})\n\nconst renderLink = ({ item, index, loc }) => {\n  let text = item;\n  \n  // shorten super long names using ellipsis\n  if (text.length > 14) {\n    text = text.replace(/^(.{13}).{2,}/, \"$1…\");\n  }\n  \n  if (index === 0) {\n    text = 'Home'\n  }\n\n  const path = loc.filter((item, i) => {\n    return i <= index;\n  }).join('/')\n\n  return (\n    <Link to={path} style={{ textDecoration: 'none' }}>\n      <Typography color=\"textPrimary\">{text}</Typography>\n    </Link>\n  )\n}\n\nconst BCrumbs = withRouter(({ location, classes }) => {\n  const loc = location.pathname.split('/');\n\n  return (\n    <div className={classes.bcrumb}>\n      <Breadcrumbs separator={<NavigateNextIcon fontSize=\"small\" />} arial-label=\"Breadcrumb\">\n        {\n          loc.map((item, index) => {\n            return (\n              <div key={item}>\n                { renderLink({item, index, loc}) }\n              </div>\n            )\n          })\n        }\n      </Breadcrumbs>\n    </div>\n  )\n})\n\nexport default withStyles(styles)(BCrumbs);\n","import React from 'react';\nimport Drawer from '@material-ui/core/Drawer';\nimport BCrumbs from './BCrumbs';\n// import Loading from '../Loading';\n\nconst RightDrawer = ({classes, children}) => {\n  return (\n    <Drawer\n        className={classes.drawer}\n        variant=\"permanent\"\n        anchor=\"right\"\n        classes={{\n          paper: classes.drawerPaper,\n        }}\n      >\n      <div className={classes.toolbar} />\n      {/* <Loading /> */}\n      <BCrumbs />\n      { children }\n    </Drawer>\n  )\n}\n\nexport default RightDrawer;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport InputBase from '@material-ui/core/InputBase';\nimport { fade } from '@material-ui/core/styles/colorManipulator';\nimport { withStyles } from '@material-ui/core/styles';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport SearchIcon from '@material-ui/icons/Search';\n\nconst styles = theme => ({\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1,\n  },\n  grow: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginLeft: -12,\n    marginRight: 20,\n  },\n  title: {\n    display: 'none',\n    [theme.breakpoints.up('sm')]: {\n      display: 'block',\n    },\n  },\n  search: {\n    position: 'relative',\n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: fade(theme.palette.common.white, 0.15),\n    '&:hover': {\n      backgroundColor: fade(theme.palette.common.white, 0.25),\n    },\n    marginLeft: 0,\n    width: '100%',\n    [theme.breakpoints.up('sm')]: {\n      marginLeft: theme.spacing.unit,\n      width: 'auto',\n    },\n  },\n  searchIcon: {\n    width: theme.spacing.unit * 9,\n    height: '100%',\n    position: 'absolute',\n    pointerEvents: 'none',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  inputRoot: {\n    color: 'inherit',\n    width: '100%',\n  },\n  inputInput: {\n    paddingTop: theme.spacing.unit,\n    paddingRight: theme.spacing.unit,\n    paddingBottom: theme.spacing.unit,\n    paddingLeft: theme.spacing.unit * 10,\n    transition: theme.transitions.create('width'),\n    width: '100%',\n    [theme.breakpoints.up('sm')]: {\n      width: 120,\n      '&:focus': {\n        width: 200,\n      },\n    },\n  },\n});\n\nconst SearchAppBar = (props) => {\n  const { classes } = props;\n  return (\n    <AppBar position=\"fixed\" className={classes.appBar}>\n      <Toolbar>\n        <IconButton className={classes.menuButton} color=\"inherit\" aria-label=\"Open drawer\">\n          <MenuIcon />\n        </IconButton>\n        <Typography className={classes.title} variant=\"h6\" color=\"inherit\" noWrap>\n          Countries\n        </Typography>\n        <div className={classes.grow} />\n        <div className={classes.search}>\n          <div className={classes.searchIcon}>\n            <SearchIcon />\n          </div>\n          <InputBase\n            placeholder=\"Search…\"\n            classes={{\n              root: classes.inputRoot,\n              input: classes.inputInput,\n            }}\n          />\n        </div>\n      </Toolbar>\n    </AppBar>\n  );\n}\n\nSearchAppBar.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(SearchAppBar);","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\n\nimport LeafletMap from './LeafletMap';\n\nimport RightDrawer from './RightDrawer';\nimport SearchAppBar from './SearchAppBar';\n\nconst drawerWidth = 400;\n\nconst styles = theme => ({\n  root: {\n    display: 'flex',\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n    [theme.breakpoints.down('sm')]: {\n      width: '100vw',\n    },\n  },\n  drawerPaper: {\n    width: drawerWidth,\n    [theme.breakpoints.down('sm')]: {\n      width: '100vw',\n    },\n  },\n  content: {\n    flexGrow: 1,\n  },\n  toolbar: theme.mixins.toolbar,\n});\n\nconst Layout = (props) => {\n  const { classes } = props;\n\n  return (\n    <div className={classes.root}>\n      <SearchAppBar />\n      <main className={classes.content}>\n        <div className={classes.toolbar} />\n        <LeafletMap />\n      </main>\n      <RightDrawer {...props} />\n    </div>\n  );\n}\n\nLayout.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(Layout);","import React from 'react';\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\n\nconst Loading = (props) => {\n  return (\n    <LinearProgress color=\"primary\" variant=\"indeterminate\"/>\n  );\n}\n \nexport default Loading;","import gql from 'graphql-tag';\n\nexport default gql`{\n  continents {\n    lat\n    lng\n    bbox {\n      east\n      south\n      north\n      west\n      accuracyLevel\n    }\n    name\n    geonameId\n    population\n  }\n}`","import React from 'react';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport { Link } from 'react-router-dom';\nimport { graphql } from 'react-apollo';\nimport Loading from '../components/Loading';\n\nimport GET_CONTINENTS from '../graphql/queries/GET_CONTINENTS';\n\nconst Home = ({ conts: { loading, continents } }) => {\n  if (loading) return <Loading />\n  return (\n    <List component=\"nav\">\n      {\n        continents.map((cont) => {\n          return (\n            <Link\n              key={cont.name}\n              style={{ textDecoration: 'none' }}\n              to={{ pathname: `/${cont.name}`, state: { continent: cont } }}\n            >\n              <ListItem button>\n                <ListItemText primary={cont.name} />\n              </ListItem>\n            </Link>\n          )\n        })\n      }\n    </List>\n  )\n}\n\nexport default graphql(GET_CONTINENTS, {\n  name: 'conts'\n})(Home);\n","import React from 'react';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ReactCountryFlag from \"react-country-flag\";\nimport { Link } from 'react-router-dom';\n\nconst CountryList = ({ countries }) => {\n  return ( \n    <List component=\"nav\">\n      {\n        countries.map((country) => {\n          return (\n            <Link\n              key={country.countryName}\n              style={{ textDecoration: 'none' }}\n              to={{ pathname: `/${country.continentName}/${country.countryName}`, state: { country } }}\n            >\n              <ListItem button>\n                <ReactCountryFlag code={country.countryCode} svg />\n                <ListItemText primary={country.countryName} />\n              </ListItem>\n            </Link>\n          )\n        })\n      }\n    </List>\n  );\n}\n \nexport default CountryList;","import gql from 'graphql-tag';\n\nexport default gql`\n  query countries($continentName: String!) {\n    countries(continentName: $continentName) {\n      continent\n      capital\n      languages {\n        code\n        name\n      }\n      geonameId\n      isoAlpha3\n      fipsCode\n      population\n      isoNumeric\n      areaInSqKm\n      countryCode\n      countryName\n      continentName\n      currency {\n        code\n        symbol\n      }\n      north\n      east\n      south\n      west\n    }\n  }\n`","import gql from 'graphql-tag';\n\nexport default gql`\n  query continent($continentName: String!) {\n    continent(continentName: $continentName) {\n      name\n      geonameId\n      lat\n      lng\n      bbox {\n        east\n        south\n        north\n        west\n      }\n      population\n    }\n  }\n`","import React, { useEffect, useContext } from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport { withStyles } from '@material-ui/core/styles';\nimport CountryList from '../components/CountryList';\nimport { graphql, compose } from 'react-apollo';\nimport AppContainer from '../appContainer';\nimport Loading from '../components/Loading';\n\nimport GET_COUNTRIES from '../graphql/queries/GET_COUNTRIES';\nimport GET_CONTINENT from '../graphql/queries/GET_CONTINENT';\n\nconst styles = theme => ({\n  continentName: {\n    padding: theme.spacing.unit * 3,\n    fontWeight: 'initial',\n    fontSize: 50,\n    textAlign: 'center'\n  }\n})\n\nconst Continent = ({ classes, location, counts: { loading, countries }, cont: { continent, loadingCont } }) => {\n  if (loading || loadingCont) return <Loading />\n\n  const { changeMapPosition } = useContext(AppContainer.Context);\n\n  useEffect(() => {\n    return changeMapPosition(continent);\n  }, [continent.name]);\n\n  return (\n    <>\n      <Typography className={classes.continentName} color=\"textPrimary\">{continent.name}</Typography>\n      <CountryList countries={countries}/>\n    </>\n  )\n}\n\nexport default compose(\n  withStyles(styles),\n  graphql(GET_COUNTRIES, {\n    name: 'counts',\n    options: (props) => ({\n      variables: {\n        continentName: props.location.pathname.split('/')[1]\n      }\n    })\n  }),\n  graphql(GET_CONTINENT, {\n    name: 'cont',\n    options: (props) => ({\n      variables: {\n        continentName: props.location.pathname.split('/')[1]\n      }\n    })\n  })\n)(Continent)\n","import React, { useState } from 'react';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Avatar from '@material-ui/core/Avatar';\nimport Paper from '@material-ui/core/Paper';\nimport PeopleIcon from '@material-ui/icons/People';\nimport PlaceIcon from '@material-ui/icons/Place';\nimport LanguageIcon from '@material-ui/icons/Language';\nimport Collapse from '@material-ui/core/Collapse';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport { withStyles } from '@material-ui/core/styles';\n\nimport green from '@material-ui/core/colors/green';\nimport pink from '@material-ui/core/colors/pink';\nimport blue from '@material-ui/core/colors/blue';\nimport purple from '@material-ui/core/colors/purple';\n\nconst styles = theme => ({\n  listContainer: {\n    margin: 10\n  },\n  nested: {\n    paddingLeft: theme.spacing.unit * 4,\n  },\n  greenAvatar: {\n    color: '#fff',\n    backgroundColor: green[500]\n  },\n  pinkAvatar: {\n    color: '#fff',\n    backgroundColor: pink[500]\n  },\n  blueAvatar: {\n    color: '#fff',\n    backgroundColor: blue[500]\n  },\n  purpleAvatar: {\n    color: '#fff',\n    backgroundColor: purple[500]\n  }\n})\n\nconst CountryInfo = (props) => {\n  const [ showLangs, toggleShowLangs ] = useState(false)\n\n  const { capital, currency, population, classes, languages} = props;\n\n  return (\n    <Paper className={classes.listContainer}>\n      <List>\n        <ListItem>\n          <Avatar className={classes.greenAvatar}>\n            <PlaceIcon />\n          </Avatar>\n          <ListItemText secondary=\"Capital\" primary={capital} />\n        </ListItem>\n        <ListItem>\n          <Avatar className={classes.pinkAvatar}>\n            { currency.symbol }\n          </Avatar>\n          <ListItemText secondary=\"Currency\" primary={currency.code} />\n        </ListItem>\n        <ListItem>\n          <Avatar className={classes.blueAvatar}>\n            <PeopleIcon />\n          </Avatar>\n          <ListItemText secondary=\"Population\" primary={population.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")} />\n        </ListItem>\n        <ListItem button onClick={() => toggleShowLangs(!showLangs)}>\n          <Avatar className={classes.purpleAvatar}>\n            <LanguageIcon />\n          </Avatar>\n          <ListItemText primary={languages.length + ' Language/s'} />\n          {showLangs ? <ExpandLess /> : <ExpandMore />}\n        </ListItem>\n        <Collapse in={showLangs} timeout=\"auto\" unmountOnExit>\n          {\n            languages.map(l => (\n              <List component=\"div\" disablePadding key={l.code}>\n                <ListItem className={classes.nested}>\n                  <ListItemText inset primary={`${l.name} (${l.code})`} />\n                </ListItem>\n              </List>\n            ))\n          }\n        </Collapse>\n      </List>\n    </Paper>\n  );\n}\n \nexport default withStyles(styles)(CountryInfo);","import gql from 'graphql-tag';\n\nexport default gql`\n  query country($continentName: String!, $countryName: String!) {\n    country(continentName: $continentName, countryName: $countryName) {\n      continent\n      capital\n      languages {\n        code\n        name\n      }\n      geonameId\n      isoAlpha3\n      fipsCode\n      population\n      isoNumeric\n      areaInSqKm\n      countryCode\n      countryName\n      continentName\n      currency {\n        code\n        symbol\n      }\n      north\n      east\n      south\n      west\n    }\n  }\n`","import React, { useContext, useEffect } from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport { graphql, compose } from 'react-apollo';\nimport { withStyles } from '@material-ui/core/styles';\nimport ReactCountryFlag from \"react-country-flag\";\nimport Paper from '@material-ui/core/Paper';\n\nimport AppContainer from '../../appContainer';\nimport Loading from '../../components/Loading';\nimport CountryInfo from './CountryInfo';\nimport GET_COUNTRY from '../../graphql/queries/GET_COUNTRY';\n\nconst styles = theme => ({\n  countryName: {\n    padding: theme.spacing.unit * 3,\n    paddingTop: 0,\n    fontWeight: 'initial',\n    fontSize: 20,\n    textAlign: 'center'\n  },\n  flagContainer: {\n    display: 'flex',\n    justifyContent: 'center',\n    paddingTop: 10\n  },\n  cont: {\n    margin: 10\n  }\n})\n\nconst Country = ({ classes, location, cntry: { loading, country } }) => {\n  if (loading) return <Loading />\n\n  const { changeMapPosition } = useContext(AppContainer.Context);\n\n  useEffect(() => {\n    const bbox = {\n      north: country.north,\n      east: country.east,\n      west: country.west,\n      south: country.south\n    }\n\n    return changeMapPosition({ bbox });\n  }, [country]);\n\n  return (\n    <>\n      <Paper className={classes.cont}>\n        <div className={classes.flagContainer}>\n          <ReactCountryFlag\n            styleProps={{\n              width: '150px',\n              height: '112.5px',\n              border: '#ababab solid 1px'\n            }}\n            code={country.countryCode}\n            svg\n          />\n        </div>\n        <Typography className={classes.countryName} color=\"textPrimary\">{country.countryName}</Typography>\n      </Paper>\n      <CountryInfo { ...country } />\n    </>\n  )\n} \n\nexport default compose(\n  withStyles(styles),\n  graphql(GET_COUNTRY, {\n    name: 'cntry',\n    options: (props) => ({\n      variables: {\n        continentName: props.location.pathname.split('/')[1],\n        countryName: props.location.pathname.split('/')[2],\n      }\n    })\n  })\n)(Country);\n\n","import React, { Component } from \"react\";\nimport { MuiThemeProvider, createMuiTheme } from \"@material-ui/core/styles\";\nimport red from \"@material-ui/core/colors/red\";\nimport green from \"@material-ui/core/colors/green\";\nimport { Router, Route } from \"react-router-dom\";\nimport { createHashHistory } from \"history\";\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"react-apollo\";\n\nimport \"typeface-roboto\";\n\nimport AppContainer from \"./appContainer\";\nimport Layout from \"./components/layout\";\nimport Home from \"./pages/Home\";\nimport Continent from \"./pages/Continent\";\nimport Country from \"./pages/country\";\n\n// A theme with custom primary and secondary color.\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      light: green[300],\n      main: green[500],\n      dark: green[700],\n      contrastText: \"#fff\"\n    },\n    secondary: {\n      light: red[300],\n      main: red[500],\n      dark: red[700],\n      contrastText: \"#000\"\n    }\n  },\n  typography: {\n    useNextVariants: true\n  }\n});\n\nconst hashHistory = createHashHistory({ basename: process.env.PUBLIC_URL });\n\nconst client = new ApolloClient({\n  uri: \"https://pacific-forest-82775.herokuapp.com/graphql\"\n});\n\nclass App extends Component {\n  render() {\n    return (\n      <ApolloProvider client={client}>\n        <MuiThemeProvider theme={theme}>\n          <AppContainer.Provider>\n            <Router history={hashHistory}>\n              <Layout>\n                <Route path=\"/\" exact component={Home} />\n                <Route path=\"/:continent\" exact component={Continent} />\n                <Route path=\"/:continent/:country\" exact component={Country} />\n              </Layout>\n            </Router>\n          </AppContainer.Provider>\n        </MuiThemeProvider>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}